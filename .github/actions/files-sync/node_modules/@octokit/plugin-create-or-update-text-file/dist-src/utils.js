const isNode = globalThis.process && globalThis.process.release && globalThis.process.release.name;
function nodeUtf8ToBase64(data) {
  return Buffer.from(data, "utf-8").toString("base64");
}
function nodeBase64ToUtf8(data) {
  return Buffer.from(data, "base64").toString("utf-8");
}
function browserUtf8ToBase64(data) {
  return btoa(
    encodeURIComponent(data).replace(
      /%([0-9A-F]{2})/g,
      function toSolidBytes(_match, p1) {
        return String.fromCharCode("0x" + p1);
      }
    )
  );
}
function browserBase64ToUtf8(data) {
  return decodeURIComponent(
    atob(data).split("").map(function(c) {
      return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
    }).join("")
  );
}
const utf8ToBase64 = isNode ? nodeUtf8ToBase64 : browserUtf8ToBase64;
const base64ToUtf8 = isNode ? nodeBase64ToUtf8 : browserBase64ToUtf8;
export {
  base64ToUtf8,
  utf8ToBase64
};
