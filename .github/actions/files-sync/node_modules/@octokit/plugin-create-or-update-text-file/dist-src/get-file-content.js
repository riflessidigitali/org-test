import { RequestError } from "@octokit/request-error";
import { Octokit } from "@octokit/core";
import { base64ToUtf8 } from "./utils";
async function getFileContents(octokit, options) {
  const route = "GET /repos/{owner}/{repo}/contents/{path}";
  const { branch, ...parameters } = options;
  const getContentsParameters = {
    ...parameters,
    ref: branch
  };
  const requestOptions = octokit.request.endpoint(route, getContentsParameters);
  const { data } = await octokit.request(route, getContentsParameters).catch((error) => {
    if (error.status !== 404)
      throw error;
    return {
      data: {
        content: null,
        type: "",
        sha: ""
      }
    };
  });
  if (Array.isArray(data)) {
    throw new RequestError(
      `[@octokit/plugin-create-or-update-text-file] ${requestOptions.url} is a directory`,
      403,
      {
        request: requestOptions
      }
    );
  }
  if (!("sha" in data && "content" in data)) {
    throw new RequestError(
      `[@octokit/plugin-create-or-update-text-file] ${requestOptions.url} is not a file, but a ${data.type}`,
      403,
      {
        request: requestOptions
      }
    );
  }
  if (data.content === null) {
    return {
      content: null
    };
  }
  try {
    return {
      content: base64ToUtf8(data.content),
      sha: data.sha
    };
  } catch (error) {
    if (error.message !== "URI malformed")
      throw error;
    throw new RequestError(
      `[@octokit/plugin-create-or-update-text-file] ${requestOptions.url} is a binary file, only text files are supported`,
      403,
      {
        request: requestOptions
      }
    );
  }
}
export {
  getFileContents
};
