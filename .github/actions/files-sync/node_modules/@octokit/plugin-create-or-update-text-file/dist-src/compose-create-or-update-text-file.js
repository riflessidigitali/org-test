import { Octokit } from "@octokit/core";
import { getFileContents } from "./get-file-content";
import { utf8ToBase64 } from "./utils";
async function composeCreateOrUpdateTextFile(octokit, options) {
  const {
    content: contentOrFn,
    message,
    committer,
    author,
    ...getOptions
  } = options;
  const currentFile = await getFileContents(octokit, getOptions);
  const content = typeof contentOrFn === "function" ? await contentOrFn({
    exists: currentFile.content !== null,
    content: currentFile.content
  }) : contentOrFn;
  if (content === currentFile.content) {
    return {
      updated: false,
      deleted: false,
      data: {},
      headers: {}
    };
  }
  if (currentFile.sha && content === null) {
    const response2 = await octokit.request(
      "DELETE /repos/{owner}/{repo}/contents/{path}",
      {
        ...getOptions,
        message,
        sha: currentFile.sha
      }
    );
    return {
      ...response2,
      updated: true,
      deleted: true
    };
  }
  const response = await octokit.request(
    "PUT /repos/{owner}/{repo}/contents/{path}",
    {
      ...getOptions,
      message,
      ...currentFile,
      content: utf8ToBase64(content)
    }
  );
  return {
    ...response,
    updated: true,
    deleted: false,
    content
  };
}
export {
  composeCreateOrUpdateTextFile
};
