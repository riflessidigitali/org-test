// pkg/dist-src/index.js
import { Octokit as Octokit3 } from "@octokit/core";

// pkg/dist-src/compose-create-or-update-text-file.js
import { Octokit as Octokit2 } from "@octokit/core";

// pkg/dist-src/get-file-content.js
import { RequestError } from "@octokit/request-error";
import { Octokit } from "@octokit/core";

// pkg/dist-src/utils.js
var isNode = globalThis.process && globalThis.process.release && globalThis.process.release.name;
function nodeUtf8ToBase64(data) {
  return Buffer.from(data, "utf-8").toString("base64");
}
function nodeBase64ToUtf8(data) {
  return Buffer.from(data, "base64").toString("utf-8");
}
function browserUtf8ToBase64(data) {
  return btoa(
    encodeURIComponent(data).replace(
      /%([0-9A-F]{2})/g,
      function toSolidBytes(_match, p1) {
        return String.fromCharCode("0x" + p1);
      }
    )
  );
}
function browserBase64ToUtf8(data) {
  return decodeURIComponent(
    atob(data).split("").map(function(c) {
      return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
    }).join("")
  );
}
var utf8ToBase64 = isNode ? nodeUtf8ToBase64 : browserUtf8ToBase64;
var base64ToUtf8 = isNode ? nodeBase64ToUtf8 : browserBase64ToUtf8;

// pkg/dist-src/get-file-content.js
async function getFileContents(octokit, options) {
  const route = "GET /repos/{owner}/{repo}/contents/{path}";
  const { branch, ...parameters } = options;
  const getContentsParameters = {
    ...parameters,
    ref: branch
  };
  const requestOptions = octokit.request.endpoint(route, getContentsParameters);
  const { data } = await octokit.request(route, getContentsParameters).catch((error) => {
    if (error.status !== 404)
      throw error;
    return {
      data: {
        content: null,
        type: "",
        sha: ""
      }
    };
  });
  if (Array.isArray(data)) {
    throw new RequestError(
      `[@octokit/plugin-create-or-update-text-file] ${requestOptions.url} is a directory`,
      403,
      {
        request: requestOptions
      }
    );
  }
  if (!("sha" in data && "content" in data)) {
    throw new RequestError(
      `[@octokit/plugin-create-or-update-text-file] ${requestOptions.url} is not a file, but a ${data.type}`,
      403,
      {
        request: requestOptions
      }
    );
  }
  if (data.content === null) {
    return {
      content: null
    };
  }
  try {
    return {
      content: base64ToUtf8(data.content),
      sha: data.sha
    };
  } catch (error) {
    if (error.message !== "URI malformed")
      throw error;
    throw new RequestError(
      `[@octokit/plugin-create-or-update-text-file] ${requestOptions.url} is a binary file, only text files are supported`,
      403,
      {
        request: requestOptions
      }
    );
  }
}

// pkg/dist-src/compose-create-or-update-text-file.js
async function composeCreateOrUpdateTextFile(octokit, options) {
  const {
    content: contentOrFn,
    message,
    committer,
    author,
    ...getOptions
  } = options;
  const currentFile = await getFileContents(octokit, getOptions);
  const content = typeof contentOrFn === "function" ? await contentOrFn({
    exists: currentFile.content !== null,
    content: currentFile.content
  }) : contentOrFn;
  if (content === currentFile.content) {
    return {
      updated: false,
      deleted: false,
      data: {},
      headers: {}
    };
  }
  if (currentFile.sha && content === null) {
    const response2 = await octokit.request(
      "DELETE /repos/{owner}/{repo}/contents/{path}",
      {
        ...getOptions,
        message,
        sha: currentFile.sha
      }
    );
    return {
      ...response2,
      updated: true,
      deleted: true
    };
  }
  const response = await octokit.request(
    "PUT /repos/{owner}/{repo}/contents/{path}",
    {
      ...getOptions,
      message,
      ...currentFile,
      content: utf8ToBase64(content)
    }
  );
  return {
    ...response,
    updated: true,
    deleted: false,
    content
  };
}

// pkg/dist-src/version.js
var VERSION = "4.0.1";

// pkg/dist-src/index.js
function createOrUpdateTextFile(octokit) {
  return {
    createOrUpdateTextFile(options) {
      return composeCreateOrUpdateTextFile(octokit, options);
    }
  };
}
createOrUpdateTextFile.VERSION = VERSION;
export {
  composeCreateOrUpdateTextFile,
  createOrUpdateTextFile
};
